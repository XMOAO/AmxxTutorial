{
    "functions": [
        {
            "Comment": "Returns player deaths.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_deaths",
            "Function": "native cs_get_user_deaths(index);"
        },
        {
            "Comment": "Sets player deaths.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_deaths",
            "Function": "native cs_set_user_deaths(index, newdeaths);"
        },
        {
            "Comment": "Returns index of entity (does not have to be a player) which hostage is following. 0 is hostage doesn't follow anything.\nNote: this native does not work on Condition Zero, which has a different hostage AI than CS.",
            "CommentTags": [],
            "FunctionName": "cs_get_hostage_foll",
            "Function": "native cs_get_hostage_foll(index);"
        },
        {
            "Comment": "Set hostage to follow entity specified in followedindex. Does not have to be a player. If followedindex is 0 the hostage will stop following.\nNote: this native does not work on Condition Zero, which has a different hostage AI than CS.",
            "CommentTags": [],
            "FunctionName": "cs_set_hostage_foll",
            "Function": "native cs_set_hostage_foll(index, followedindex = 0);"
        },
        {
            "Comment": "Get unique hostage id.",
            "CommentTags": [],
            "FunctionName": "cs_get_hostage_id",
            "Function": "native cs_get_hostage_id(index);"
        },
        {
            "Comment": "Get amount of ammo in backpack on a user for a specific weapon.\nLook in amxconst.inc for weapon types: CSW_*.\nWeapons on the same line uses the same ammo type:\nawm\nscout, ak, g3\npara\nfamas, m4a1, aug, sg550, galil, sg552\nm3, xm\nusp, ump, mac\nfiveseven, p90\ndeagle\np228\nglock, mp5, tmp, elites\nflash\nhe\nsmoke",
            "CommentTags": [],
            "FunctionName": "cs_get_user_bpammo",
            "Function": "native cs_get_user_bpammo(index, weapon);"
        },
        {
            "Comment": "Restock/remove ammo in a user's backpack.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_bpammo",
            "Function": "native cs_set_user_bpammo(index, weapon, amount);"
        },
        {
            "Comment": "Returns 1 if user has a defuse kit.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_defuse",
            "Function": "native cs_get_user_defuse(index);"
        },
        {
            "Comment": "If defusekit is 1, the user will have a defuse kit.\nYou can specify a different colour for the defuse kit icon showing on hud. Default is the normal green.\nYou can specify an icon. Default is \"defuser\". Set flash to 1 if you want the icon to flash red.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_defuse",
            "Function": "native cs_set_user_defuse(index, defusekit = 1, r = 0, g = 160, b = 0, icon[] = \"defuser\", flash = 0);"
        },
        {
            "Comment": "Is user in buyzone? Returns 1 when true, 0 when false.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_buyzone",
            "Function": "native cs_get_user_buyzone(index);"
        },
        {
            "Comment": "Returns 1 when user has a primary weapon OR a shield in inventory, else 0.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_hasprim",
            "Function": "native cs_get_user_hasprim(index);"
        },
        {
            "Comment": "Get user model.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_model",
            "Function": "native cs_get_user_model(index, model[], len);"
        },
        {
            "Comment": "Set user model.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_model",
            "Function": "native cs_set_user_model(index, const model[]);"
        },
        {
            "Comment": "Use to reset model to standard selected model.",
            "CommentTags": [],
            "FunctionName": "cs_reset_user_model",
            "Function": "native cs_reset_user_model(index);"
        },
        {
            "Comment": "Returns users money.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_money",
            "Function": "native cs_get_user_money(index);"
        },
        {
            "Comment": "Gives money to user. If flash is 1, the difference between new and old amount will flash red or green.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_money",
            "Function": "native cs_set_user_money(index, money, flash = 1);"
        },
        {
            "Comment": "Does user have night vision goggles?",
            "CommentTags": [],
            "FunctionName": "cs_get_user_nvg",
            "Function": "native cs_get_user_nvg(index);"
        },
        {
            "Comment": "Set nvgoggles to 1 to give night vision goggles to index. Set it to 0 to remove them.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_nvg",
            "Function": "native cs_set_user_nvg(index, nvgoggles = 1);"
        },
        {
            "Comment": "Returns 1 if user has the \"skill\" to plant bomb, else 0. Normally this would only be true for a terrorist carrying a bomb.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_plant",
            "Function": "native cs_get_user_plant(index);"
        },
        {
            "Comment": "If plant is 1, a user will be set to be able to plant bomb within the usual bomb target areas if having one.\nYou should use this if you give a player a weapon_c4, or he won't be able to plant it\nwithout dropping it and picking it up again (only possible for terrorists).\nIf showbombicon is 1, the green C4 icon will be shown on user hud (if plant \"skill\" was enabled).",
            "CommentTags": [],
            "FunctionName": "cs_set_user_plant",
            "Function": "native cs_set_user_plant(index, plant = 1, showbombicon = 1);"
        },
        {
            "Comment": "Set user team without killing player.\nIf model is anything other than CS_DONTCHANGE, that will be set as player's model.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_team",
            "Function": "enum CsInternalModel {\n\tCS_DONTCHANGE = 0,\n\tCS_CT_URBAN = 1,\n\tCS_T_TERROR = 2,\n\tCS_T_LEET = 3,\n\tCS_T_ARCTIC = 4,\n\tCS_CT_GSG9 = 5,\n\tCS_CT_GIGN = 6,\n\tCS_CT_SAS = 7,\n\tCS_T_GUERILLA = 8,\n\tCS_CT_VIP = 9,\n\tCZ_T_MILITIA = 10,\n\tCZ_CT_SPETSNAZ = 11\n};\nnative cs_set_user_team(index, {CsTeams,_}:team, {CsInternalModel,_}:model = CS_DONTCHANGE);"
        },
        {
            "Comment": "Get team directly from player's entity.\n1 = terrorist\n2 = counter-terrorist\n3 = spectator",
            "CommentTags": [],
            "FunctionName": "CsTeams:cs_get_user_team",
            "Function": "enum CsTeams {\n\tCS_TEAM_UNASSIGNED = 0,\n\tCS_TEAM_T = 1,\n\tCS_TEAM_CT = 2,\n\tCS_TEAM_SPECTATOR = 3\n};\nnative CsTeams:cs_get_user_team(index, &{CsInternalModel,_}:model = CS_DONTCHANGE);"
        },
        {
            "Comment": "Is user vip? Returns 1 if true, 0 if false.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_vip",
            "Function": "native cs_get_user_vip(index);"
        },
        {
            "Comment": "If vip = 1, user is set to vip.\nIf model = 1, then user's model will be changed to VIP model or random CT model if vip = 0.\nIf scoreboard = 1, then scoreboard will be updated to show that user is VIP.\nThis shouldn't be used for players on teams other than CT.\nNOTE:    this is mostly useful for unsetting vips, so they can change teams and/or buy items properly.\nIt does not alter game play; the one being VIP at start of round will retain internal status as VIP; terrorists\ncan terminate him and accomplish their objective, etc.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_vip",
            "Function": "native cs_set_user_vip(index, vip = 1, model = 1, scoreboard = 1);"
        },
        {
            "Comment": "Returns 1 of specified user has tk:ed (team killed).",
            "CommentTags": [],
            "FunctionName": "cs_get_user_tked",
            "Function": "native cs_get_user_tked(index);"
        },
        {
            "Comment": "Returns 1 of specified user has TKed (team killed).\ntk = 1: player has TKed\ntk = 0: player hasn't TKed\nSet subtract to how many frags to subtract. Set subtract to negative value to add frags.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_tked",
            "Function": "native cs_set_user_tked(index, tk = 1, subtract = 1);"
        },
        {
            "Comment": "Returns different values depending on if user is driving a vehicle - and if so at what speed.\n0: no driving\n1: driving, but standing still\n2-4: driving, different positive speeds\n5: driving, negative speed (backing)\nNote: these values were tested quickly, they may differ.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_driving",
            "Function": "native cs_get_user_driving(index);"
        },
        {
            "Comment": "Returns 1 if user has a shield, else 0.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_shield",
            "Function": "native cs_get_user_shield(index);"
        },
        {
            "Comment": "Returns 1 if user is using a stationary gun, else 0.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_stationary",
            "Function": "native cs_get_user_stationary(index);"
        },
        {
            "Comment": "Returns armor value and sets by reference the armor type in second parameter.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_armor",
            "Function": "enum CsArmorType {\n\tCS_ARMOR_NONE = 0, // no armor\n\tCS_ARMOR_KEVLAR = 1, // armor\n\tCS_ARMOR_VESTHELM = 2 // armor and helmet\n};\nnative cs_get_user_armor(index, &CsArmorType:armortype);"
        },
        {
            "Comment": "Use this instead of fun's set_user_armor.\nAppropriate message to update client's HUD will be sent if armortype is kevlar or vesthelm.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_armor",
            "Function": "native cs_set_user_armor(index, armorvalue, CsArmorType:armortype);"
        },
        {
            "Comment": "Returns 1 if specified weapon is in burst mode.",
            "CommentTags": [],
            "FunctionName": "cs_get_weapon_burst",
            "Function": "native cs_get_weapon_burst(index);"
        },
        {
            "Comment": "If burstmode = 1, weapon will be changed to burst mode, 0 and non-burst mode (semiautomatic/automatic) will be activated.\nOnly GLOCK and FAMAS can enter/leave burst mode.",
            "CommentTags": [],
            "FunctionName": "cs_set_weapon_burst",
            "Function": "native cs_set_weapon_burst(index, burstmode = 1);"
        },
        {
            "Comment": "Returns 1 if weapon is silenced, else 0.",
            "CommentTags": [],
            "FunctionName": "cs_get_weapon_silen",
            "Function": "native cs_get_weapon_silen(index);"
        },
        {
            "Comment": "If silence = 1, weapon will be silenced, 0 and silencer will be removed. Only USP and M4A1 can be silenced.",
            "CommentTags": [],
            "FunctionName": "cs_set_weapon_silen",
            "Function": "native cs_set_weapon_silen(index, silence = 1, draw_animation = 1);"
        },
        {
            "Comment": "Returns amount of ammo in weapon's clip.",
            "CommentTags": [],
            "FunctionName": "cs_get_weapon_ammo",
            "Function": "native cs_get_weapon_ammo(index);"
        },
        {
            "Comment": "Set amount of ammo in weapon's clip.",
            "CommentTags": [],
            "FunctionName": "cs_set_weapon_ammo",
            "Function": "native cs_set_weapon_ammo(index, newammo);"
        },
        {
            "Comment": "Get weapon type. Corresponds to CSW_* in amxconst.inc: 1 is CSW_P228, 2 is CSW_SCOUT and so on...",
            "CommentTags": [],
            "FunctionName": "cs_get_weapon_id",
            "Function": "native cs_get_weapon_id(index);"
        },
        {
            "Comment": "Returns 1 if no knives mode is enabled, else 0.",
            "CommentTags": [],
            "FunctionName": "cs_get_no_knives",
            "Function": "native cs_get_no_knives();"
        },
        {
            "Comment": "Enabled no knives mode by calling this with value 1. Disabled with 0.\nNo knives mode means that player will not be given a knife when spawning.\nYou can still give knives (ie through fun's give_item).",
            "CommentTags": [],
            "FunctionName": "cs_set_no_knives",
            "Function": "native cs_set_no_knives(noknives = 0);"
        },
        {
            "Comment": "Spawns a Counter-Strike player",
            "CommentTags": [],
            "FunctionName": "cs_user_spawn",
            "Function": "native cs_user_spawn(player);"
        },
        {
            "Comment": "Get what weapon type (CSW_*) an armoury_entity is.",
            "CommentTags": [],
            "FunctionName": "cs_get_armoury_type",
            "Function": "native cs_get_armoury_type(index);"
        },
        {
            "Comment": "Set an armoury_entity to be of specified type. You will have to set the appropriate model.\nThe second argument, type, should be a CSW_* constant. Not all weapons are supported by Counter-strike.\nSupported weapons/items: CSW_MP5NAVY, CSW_TMP, CSW_P90, CSW_MAC10, CSW_AK47, CSW_SG552, CSW_M4A1, CSW_AUG, CSW_SCOUT\nCSW_G3SG1, CSW_AWP, CSW_M3, CSW_XM1014, CSW_M249, CSW_FLASHBANG, CSW_HEGRENADE, CSW_VEST, CSW_VESTHELM, CSW_SMOKEGRENADE",
            "CommentTags": [],
            "FunctionName": "cs_set_armoury_type",
            "Function": "native cs_set_armoury_type(index, type);"
        },
        {
            "Comment": "Returns in bitwise form if the user is in a specific map zone.\nNOTE: If user can't plant (cs_get_user_plant(index) is 0) then cs_get_user_mapzones(index) & CS_MAPZONE_BOMBTARGET will return 0 too.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_mapzones",
            "Function": "native cs_get_user_mapzones(index);"
        },
        {
            "Comment": "Sets a weapon zoom type on a player, any zoom type will work for all weapons, so you can even set an awp zoom to pistols :D\nThe 2nd param has to be one of the above zoom types in the enum. Mode can only be 0 or 1.\nIf mode=0 (blocking mode), the user will be forced to use the zoom type set by the native, and wont be able to change it (even by changing weapon)\nuntil the native resets the zoom with CS_RESET_ZOOM.\nIf mode=1 the user will be able to restore back to a normal view by changing weapon.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_zoom",
            "Function": "native cs_set_user_zoom(index, type, mode);"
        },
        {
            "Comment": "Returns how a user is zooming during the native call. Values correspond to the above enum, but will return 0 if an error occurred.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_zoom",
            "Function": "native cs_get_user_zoom(index);"
        },
        {
            "Comment": "Returns the submodel setting of the player.\nIf this is 1, then the user has a backpack or defuser on their model (depending on team)",
            "CommentTags": [],
            "FunctionName": "cs_get_user_submodel",
            "Function": "native cs_get_user_submodel(index);"
        },
        {
            "Comment": "Sets the submodel setting of the player.\nIf this is 1, then the user has a backpack or defuser on their model (depending on team)\n0 removes it.",
            "CommentTags": [],
            "FunctionName": "cs_set_user_submodel",
            "Function": "native cs_set_user_submodel(index, value);"
        },
        {
            "Comment": "Gets or sets the user's last activity time.  This is the time that CS's internal afk kicker\nchecks to see who has been afk too long.",
            "CommentTags": [],
            "FunctionName": "Float:cs_get_user_lastactivity",
            "Function": "native Float:cs_get_user_lastactivity(index);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native cs_set_user_lastactivity(index, Float:value);",
            "FunctionName": "cs_set_user_lastactivity"
        },
        {
            "Comment": "Gets or sets the number of hostages that a user has killed.",
            "CommentTags": [],
            "FunctionName": "cs_get_user_hostagekills",
            "Function": "native cs_get_user_hostagekills(index);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native cs_set_user_hostagekills(index, value);",
            "FunctionName": "cs_set_user_hostagekills"
        },
        {
            "Comment": "Gets or sets the time that the hostage was last used.",
            "CommentTags": [],
            "FunctionName": "Float:cs_get_hostage_lastuse",
            "Function": "native Float:cs_get_hostage_lastuse(index);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native cs_set_hostage_lastuse(index, Float:value);",
            "FunctionName": "cs_set_hostage_lastuse"
        },
        {
            "Comment": "Gets or sets the time which the hostage can next be used.",
            "CommentTags": [],
            "FunctionName": "Float:cs_get_hostage_nextuse",
            "Function": "native Float:cs_get_hostage_nextuse(index);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native cs_set_hostage_nextuse(index, Float:value);",
            "FunctionName": "cs_set_hostage_nextuse"
        },
        {
            "Comment": "Gets or sets the time in which the C4 will explode.",
            "CommentTags": [],
            "FunctionName": "Float:cs_get_c4_explode_time",
            "Function": "native Float:cs_get_c4_explode_time(index);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native cs_set_c4_explode_time(index, Float:value);",
            "FunctionName": "cs_set_c4_explode_time"
        },
        {
            "Comment": "Gets or sets whether the C4 is being defused.",
            "CommentTags": [],
            "FunctionName": "bool:cs_get_c4_defusing",
            "Function": "native bool:cs_get_c4_defusing(c4index);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native cs_set_c4_defusing(c4index, bool:defusing);",
            "FunctionName": "cs_set_c4_defusing"
        },
        {
            "Comment": "Called when CS internally fires a command to a player.  It does this for a few\nfunctions, most notably rebuy/autobuy functionality.  This is also used to pass\ncommands to CZ bots internally.",
            "CommentTags": [
                {
                    "Tag": "param",
                    "Variable": "id",
                    "Description": "Client index."
                },
                {
                    "Tag": "param",
                    "Variable": "cmd",
                    "Description": "Command string."
                },
                {
                    "Tag": "return",
                    "Description": "PLUGIN_HANDLED to block, PLUGIN_CONTINUE for normal operation."
                }
            ],
            "FunctionName": "CS_InternalCommand",
            "Function": "forward CS_InternalCommand(id, const cmd[]);"
        }
    ],
    "constants": [
        {
            "Comment": "Zoom type enum. Used for get/set_user_zoom() natives.",
            "CommentTags": [],
            "Constant": "enum\n{\n    CS_RESET_ZOOM = 0,        // Reset any zoom blocking (when using this type, mode has no effect)\n    CS_SET_NO_ZOOM,            // Disable any sort of zoom (ie: to disable zoom in all weapons use this with mode=0)\n    CS_SET_FIRST_ZOOM,        // Set first zoom (awp style) \n    CS_SET_SECOND_ZOOM,        // Set second zoom (awp style)\n    CS_SET_AUGSG552_ZOOM,        // Set aug/sg552 zoom style\n};"
        }
    ]
}