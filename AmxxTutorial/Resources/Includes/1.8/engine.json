{
    "functions": [
        {
            "Comment": "Engine functions\n\nby the AMX Mod X Development Team\n thanks to Vexd and mahnsawce\n\nThis file is provided as is (no warranties).",
            "CommentTags": [],
            "FunctionName": "traceresult",
            "Function": "#if defined _engine_included\n  #endinput\n#endif\n#define _engine_included\n\n#include <engine_const>\n\n#if AMXX_VERSION_NUM >= 175\n #pragma reqlib engine\n #if !defined AMXMODX_NOAUTOLOAD\n  #pragma loadlib engine\n #endif\n#else\n #pragma library engine\n#endif\n\nnative traceresult(type,any:...);"
        },
        {
            "Comment": "Registers a client impulse to a function.  Function is passed the ID of the user.",
            "CommentTags": [],
            "FunctionName": "register_impulse",
            "Function": "native register_impulse(impulse, const function[]);"
        },
        {
            "Comment": "Registers a touch action to a function by classnames.  Use * to specify any classname.",
            "CommentTags": [],
            "FunctionName": "register_touch",
            "Function": "native register_touch(const Touched[], const Toucher[], const function[]);"
        },
        {
            "Comment": "Registers a think action to a function by classname.",
            "CommentTags": [],
            "FunctionName": "register_think",
            "Function": "native register_think(const Classname[], const function[]);"
        },
        {
            "Comment": "Precaches an event.",
            "CommentTags": [],
            "FunctionName": "precache_event",
            "Function": "native precache_event(type, const Name[], any:...);"
        },
        {
            "Comment": "set/get a user's speak flags",
            "CommentTags": [],
            "FunctionName": "set_speak",
            "Function": "native set_speak(iIndex, iSpeakFlags);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native get_speak(iIndex);",
            "FunctionName": "get_speak"
        },
        {
            "Comment": "Drops an entity to the floor (work?)",
            "CommentTags": [],
            "FunctionName": "drop_to_floor",
            "Function": "native drop_to_floor(entity);"
        },
        {
            "Comment": "Get whole buffer containing keys and their data.",
            "CommentTags": [],
            "FunctionName": "get_info_keybuffer",
            "Function": "native get_info_keybuffer(id, buffer[], length);"
        },
        {
            "Comment": "Use an entity with another entity. \"entUsed\" could be a hostage, \"entUser\" a player.",
            "CommentTags": [],
            "FunctionName": "force_use",
            "Function": "native force_use(entUsed, entUser);"
        },
        {
            "Comment": "Get globals from server.",
            "CommentTags": [],
            "FunctionName": "Float:get_global_float",
            "Function": "native Float:get_global_float(variable);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native get_global_int(variable);",
            "FunctionName": "get_global_int"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native get_global_string(variable, string[], maxlen);",
            "FunctionName": "get_global_string"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native get_global_vector(variable, Float:vector[3]);",
            "FunctionName": "get_global_vector"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native get_global_edict(variable);",
            "FunctionName": "get_global_edict"
        },
        {
            "Comment": "Set entity bounds.",
            "CommentTags": [],
            "FunctionName": "entity_set_size",
            "Function": "native entity_set_size(index, const Float:mins[3], const Float:maxs[3]);"
        },
        {
            "Comment": "Get decal index",
            "CommentTags": [],
            "FunctionName": "get_decal_index",
            "Function": "native get_decal_index(const szDecalName[]);"
        },
        {
            "Comment": "Returns the distance between two entities.",
            "CommentTags": [],
            "FunctionName": "Float:entity_range",
            "Function": "native Float:entity_range(ida,idb);"
        },
        {
            "Comment": "Sets/gets things in an entities Entvars Struct.",
            "CommentTags": [],
            "FunctionName": "entity_get_int",
            "Function": "native entity_get_int(iIndex, iKey);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_set_int(iIndex, iKey, iVal);",
            "FunctionName": "entity_set_int"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native Float:entity_get_float(iIndex, iKey);",
            "FunctionName": "Float:entity_get_float"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_set_float(iIndex, iKey, Float:iVal);",
            "FunctionName": "entity_set_float"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_get_vector(iIndex, iKey, Float:vRetVector[3]);",
            "FunctionName": "entity_get_vector"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_set_vector(iIndex, iKey, const Float:vNewVector[3]);",
            "FunctionName": "entity_set_vector"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_get_edict(iIndex, iKey);",
            "FunctionName": "entity_get_edict"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_set_edict(iIndex, iKey, iNewIndex);",
            "FunctionName": "entity_set_edict"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_get_string(iIndex, iKey, szReturn[], iRetLen);",
            "FunctionName": "entity_get_string"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_set_string(iIndex, iKey, const szNewVal[]);",
            "FunctionName": "entity_set_string"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_get_byte(iIndex, iKey);",
            "FunctionName": "entity_get_byte"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native entity_set_byte(iIndex, iKey, iVal);",
            "FunctionName": "entity_set_byte"
        },
        {
            "Comment": "Creates an entity, will return the index of the created entity. ClassName must be valid.",
            "CommentTags": [],
            "FunctionName": "create_entity",
            "Function": "native create_entity(const szClassname[]);"
        },
        {
            "Comment": "Finds an entity in the world, will return 0 if nothing is found",
            "CommentTags": [],
            "FunctionName": "find_ent_by_class",
            "Function": "native find_ent_by_class(iIndex, const szClass[]);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native find_ent_by_owner(iIndex, const szClass[], iOwner, iJghgType=0);",
            "FunctionName": "find_ent_by_owner"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native find_ent_by_target(iIndex, const szClass[]);",
            "FunctionName": "find_ent_by_target"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native find_ent_by_tname(iIndex, const szClass[]);",
            "FunctionName": "find_ent_by_tname"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native find_ent_by_model(iIndex, const szClass[], const szModel[]);",
            "FunctionName": "find_ent_by_model"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native find_ent_in_sphere(start_from_ent, const Float:origin[3], Float:radius);",
            "FunctionName": "find_ent_in_sphere"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native call_think(entity);",
            "FunctionName": "call_think"
        },
        {
            "Comment": "Is entity valid?",
            "CommentTags": [],
            "FunctionName": "is_valid_ent",
            "Function": "native is_valid_ent(iIndex);"
        },
        {
            "Comment": "Proper origin setting, keeps updated with Half-Life engine.",
            "CommentTags": [],
            "FunctionName": "entity_set_origin",
            "Function": "native entity_set_origin(iIndex, const Float:fNewOrigin[3]);"
        },
        {
            "Comment": "Sets the model of an Entity.",
            "CommentTags": [],
            "FunctionName": "entity_set_model",
            "Function": "native entity_set_model(iIndex, const szModel[]);"
        },
        {
            "Comment": "Remove an entity from the world.",
            "CommentTags": [],
            "FunctionName": "remove_entity",
            "Function": "native remove_entity(iIndex);"
        },
        {
            "Comment": "Return current number of entities in the map",
            "CommentTags": [],
            "FunctionName": "entity_count",
            "Function": "native entity_count();"
        },
        {
            "Comment": "Simulate two entities colliding/touching.",
            "CommentTags": [],
            "FunctionName": "fake_touch",
            "Function": "native fake_touch(entTouched, entToucher);"
        },
        {
            "Comment": "2 formats.\nFormat: DispatchKeyValue(\"KeyName\",\"Value\") - sets keyvalues for the entity specified in the keyvalue() forward.\nFormat: DispatchKeyValue(index,\"KeyName\",\"Value\") - Sets keyvalue for entity not specified in keyvalue() forward.",
            "CommentTags": [],
            "FunctionName": "DispatchKeyValue",
            "Function": "#if !defined AMXMOD_BCOMPAT\nnative DispatchKeyValue(...);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native get_keyvalue(entity, const szKey[], value[], maxLength);",
            "FunctionName": "get_keyvalue"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native copy_keyvalue(szClassName[],sizea,szKeyName[],sizeb,szValue[],sizec);",
            "FunctionName": "copy_keyvalue"
        },
        {
            "Comment": "Runs the GameDLL's DispatchSpawn for an entity, I think it's used with DispatchKeyValue.",
            "CommentTags": [],
            "FunctionName": "DispatchSpawn",
            "Function": "native DispatchSpawn(iIndex);"
        },
        {
            "Comment": "Hurts/Kills players in a sphere, like an explosion, Multiplier determines damage.",
            "CommentTags": [],
            "FunctionName": "radius_damage",
            "Function": "#if !defined AMXMOD_BCOMPAT\nnative radius_damage(const Float:fExplodeAt[3], iDamageMultiplier, iRadiusMultiplier);"
        },
        {
            "Comment": "Will return the contents of a point (inside map? in sky? outside map? etc.).",
            "CommentTags": [],
            "FunctionName": "point_contents",
            "Function": "native point_contents(const Float:fCheckAt[3]);"
        },
        {
            "Comment": "Trace a line from Start(X, Y, Z) to End(X, Y, Z), will return the point hit in vReturn[3]\nand an entity index if an entity is hit.",
            "CommentTags": [],
            "FunctionName": "trace_line",
            "Function": "#if !defined AMXMOD_BCOMPAT\nnative trace_line(iIgnoreEnt, const Float:fStart[3], const Float:fEnd[3], Float:vReturn[3]);"
        },
        {
            "Comment": "Traces a hull.",
            "CommentTags": [],
            "FunctionName": "trace_hull",
            "Function": "native trace_hull(const Float:origin[3],hull,ignoredent=0,ignoremonsters=0);"
        },
        {
            "Comment": "Traces a line, and returns the normal to the plane hit in vReturn.\nReturns 0 if theres no normal.",
            "CommentTags": [],
            "FunctionName": "trace_normal",
            "Function": "native trace_normal(iIgnoreEnt, const Float:fStart[3], const Float:fEnd[3], Float:vReturn[3]);"
        },
        {
            "Comment": "Gets the ID of a grenade.",
            "CommentTags": [],
            "FunctionName": "get_grenade_id",
            "Function": "native get_grenade_id(id, model[], len, grenadeid = 0);"
        },
        {
            "Comment": "Gets gpGlobals->time from Half-Life",
            "CommentTags": [],
            "FunctionName": "Float:halflife_time",
            "Function": "native Float:halflife_time();"
        },
        {
            "Comment": "Sets map lighting, #OFF to disable.",
            "CommentTags": [],
            "FunctionName": "set_lights",
            "Function": "native set_lights(const Lighting[]);"
        },
        {
            "Comment": "Sets Player's View to entity iTargetIndex.",
            "CommentTags": [],
            "FunctionName": "attach_view",
            "Function": "native attach_view(iIndex, iTargetIndex);"
        },
        {
            "Comment": "Sets Player's View Mode.\nrpgrocket.mdl must be precached in order for this function to work",
            "CommentTags": [],
            "FunctionName": "set_view",
            "Function": "native set_view(iIndex, ViewType);"
        },
        {
            "Comment": "Direct copy of PLAYBACK_EVENT_FULL from Metamod/HLSDK.  If you don't know how that works, you probably shouldn't be using it.",
            "CommentTags": [],
            "FunctionName": "playback_event",
            "Function": "native playback_event(flags,invoker,eventindex,Float:delay,const Float:origin[3],const Float:angles[3],Float:fparam1,Float:fparam2,iparam1,iparam2,bparam1,bparam2);"
        },
        {
            "Comment": "Gets parameters sent from CmdStart.\nNote that you will receive modified values if any other plugin have\nchanged them.",
            "CommentTags": [],
            "FunctionName": "get_usercmd",
            "Function": "native get_usercmd(type,any:...);"
        },
        {
            "Comment": "Sets the parameters sent from CmdStart.\nNote that your changes will be seen by any other plugin doing get_usercmd()",
            "CommentTags": [],
            "FunctionName": "set_usercmd",
            "Function": "native set_usercmd(type,any:...);"
        },
        {
            "Comment": "Converts a string offset into a real string. Some of the forwards in fakemeta\nuses string offsets. (FM_CreateNamedEntity)",
            "CommentTags": [],
            "FunctionName": "eng_get_string",
            "Function": "native eng_get_string(_string, _returnString[], _len);"
        },
        {
            "Comment": "Called when 2 entities touch.\nptr - touched entity\nptd - toucher entity",
            "CommentTags": [],
            "FunctionName": "pfn_touch",
            "Function": "forward pfn_touch(ptr, ptd);"
        },
        {
            "Comment": "Called once every server frame. May cause lag.",
            "CommentTags": [],
            "FunctionName": "server_frame",
            "Function": "forward server_frame();"
        },
        {
            "Comment": "Called when a client types kill in console.",
            "CommentTags": [],
            "FunctionName": "client_kill",
            "Function": "forward client_kill(id);"
        },
        {
            "Comment": "Forward for PreThink()/PostThink() on a player.",
            "CommentTags": [],
            "FunctionName": "client_PreThink",
            "Function": "forward client_PreThink(id);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "forward client_PostThink(id);",
            "FunctionName": "client_PostThink"
        },
        {
            "Comment": "Forward for impulses.",
            "CommentTags": [],
            "FunctionName": "client_impulse",
            "Function": "forward client_impulse(id, impulse);"
        },
        {
            "Comment": "Called when an entity \"thinks\" (DispatchThink)",
            "CommentTags": [],
            "FunctionName": "pfn_think",
            "Function": "forward pfn_think(entid);"
        },
        {
            "Comment": "Called when an event is played",
            "CommentTags": [],
            "FunctionName": "pfn_playbackevent",
            "Function": "forward pfn_playbackevent(flags, entid, eventid, Float:delay, Float:Origin[3], Float:Angles[3], Float:fparam1, Float:fparam2, iparam1, iparam2, bparam1, bparam2);"
        },
        {
            "Comment": "Called when an entity gets a keyvalue set on it from the engine (ie: map load)  Use copy_keyvalue to get the keyvalue information",
            "CommentTags": [],
            "FunctionName": "pfn_keyvalue",
            "Function": "forward pfn_keyvalue(entid);"
        },
        {
            "Comment": "Called when an entity is spawned",
            "CommentTags": [],
            "FunctionName": "pfn_spawn",
            "Function": "forward pfn_spawn(entid);"
        },
        {
            "Comment": "As above, but returns number of ents stored in entlist. Use to find a specific type of entity classname (specify in _lookforclassname) around a\ncertain entity specified in aroundent. All matching ents are stored in entlist. Specify max amount of entities to find in maxents.\nIf aroundent is 0 its origin is not used, but origin in 6th parameter. Ie, do not specify 6th parameter (origin) if you specified an entity\nin aroundent.",
            "CommentTags": [],
            "FunctionName": "find_sphere_class",
            "Function": "native find_sphere_class(aroundent, const _lookforclassname[], Float:radius, entlist[], maxents, const Float:origin[3] = {0.0, 0.0, 0.0});"
        },
        {
            "Comment": "SDK function - checks if an origin is in an entity's view cone\nSet use3d to 1 to do the calculation in 3D. Otherwise it will be in 2D.",
            "CommentTags": [],
            "FunctionName": "is_in_viewcone",
            "Function": "native is_in_viewcone(entity, const Float:origin[3], use3d = 0);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native is_visible(entity, target);",
            "FunctionName": "is_visible"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native trace_forward(const Float:start[3], const Float:angle[3], Float:give, ignoreEnt, &Float:hitX, &Float:hitY, &Float:shortestDistance, &Float:shortestDistLow, &Float:shortestDistHigh);",
            "FunctionName": "trace_forward"
        }
    ],
    "constants": [
        {
            "Comment": "FORWARDS\n********",
            "CommentTags": [],
            "Constant": ""
        }
    ]
}