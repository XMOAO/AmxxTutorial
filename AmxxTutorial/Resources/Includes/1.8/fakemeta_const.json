{
    "functions": [],
    "constants": [
        {
            "Comment": "The actual return value of the function, use these instead of PLUGIN_HANDLED etc when\nreturning from registered forwards.",
            "CommentTags": [],
            "Constant": "#define FMRES_IGNORED    1    // Calls target function, returns normal value\n#define FMRES_HANDLED    2    // Tells metamod you did something, still calls target function and returns normal value\n#define FMRES_OVERRIDE    3    // Supposed to still call the target function but return your value instead\n                            // however this does not work properly with metamod; use supercede instead.\n#define FMRES_SUPERCEDE    4    // Block the target call, and use your return value (if applicable)\n\n// Use this with GetInfoKeyBuffer if you want the server's localinfo buffer\n#define FM_NULLENT        -1"
        },
        {
            "Comment": "Used with engfunc()",
            "CommentTags": [],
            "Constant": "enum {\n    EngFunc_PrecacheModel,                // int  )            (char *s);\n    EngFunc_PrecacheSound,                // int  )            (char *s);\n    EngFunc_SetModel,                    // void )            (edict_t *e, const char *m);\n    EngFunc_ModelIndex,                    // int  )            (const char *m);\n    EngFunc_ModelFrames,                // int    )            (int modelIndex);\n    EngFunc_SetSize,                    // void )            (edict_t *e, const float *rgflMin, const float *rgflMax);\n    EngFunc_ChangeLevel,                // void )            (char* s1, char* s2);\n    EngFunc_VecToYaw,                    // float)            (const float *rgflVector);\n    EngFunc_VecToAngles,                // void )            (const float *rgflVectorIn, float *rgflVectorOut);\n    EngFunc_MoveToOrigin,                // void )            (edict_t *ent, const float *pflGoal, float dist, int iMoveType);\n    EngFunc_ChangeYaw,                    // void )            (edict_t* ent);\n    EngFunc_ChangePitch,                // void )            (edict_t* ent);\n    EngFunc_FindEntityByString,            // edict)            (edict_t *pEdictStartSearchAfter, const char *pszField, const char *pszValue);\n    EngFunc_GetEntityIllum,                // int    )            (edict_t* pEnt);\n    EngFunc_FindEntityInSphere,            // edict)            (edict_t *pEdictStartSearchAfter, const float *org, float rad);\n    EngFunc_FindClientInPVS,            // edict)            (edict_t *pEdict);\n    EngFunc_EntitiesInPVS,                // edict)            (edict_t *pplayer);\n    EngFunc_MakeVectors,                // void )            (const float *rgflVector);\n    EngFunc_AngleVectors,                // void )            (const float *rgflVector, float *forward, float *right, float *up);\n    EngFunc_CreateEntity,                // edict)            (void);\n    EngFunc_RemoveEntity,                // void )            (edict_t *e);\n    EngFunc_CreateNamedEntity,            // edict)            (int className);\n    EngFunc_MakeStatic,                    // void )            (edict_t *ent);\n    EngFunc_EntIsOnFloor,                // int  )            (edict_t *e);\n    EngFunc_DropToFloor,                // int  )            (edict_t *e);\n    EngFunc_WalkMove,                    // int  )            (edict_t *ent, float yaw, float dist, int iMode);\n    EngFunc_SetOrigin,                    // void )            (edict_t *e, const float *rgflOrigin);\n    EngFunc_EmitSound,                    // void )            (edict_t *entity, int channel, const char *sample, float volume, float attenuation, int fFlags, int pitch);\n    EngFunc_EmitAmbientSound,            // void )            (edict_t *entity, float *pos, const char *samp, float vol, float attenuation, int fFlags, int pitch);\n\n    //With 1.71 you can pass an optional TraceLine ptr for trace natives\n    // it can be 0, for meaning \"global tr handle\" (for get/set_tr2), or\n    // it can be any other TR handle (such as one from a TR hook)\n    EngFunc_TraceLine,                    // void )            (const float *v1, const float *v2, int fNoMonsters, edict_t *pentToSkip, TraceResult *ptr);\n    EngFunc_TraceToss,                    // void )            (edict_t *pent, edict_t *pentToIgnore, TraceResult *ptr);\n    EngFunc_TraceMonsterHull,            // int  )            (edict_t *pEdict, const float *v1, const float *v2, int fNoMonsters, edict_t *pentToSkip, TraceResult *ptr);\n    EngFunc_TraceHull,                    // void )            (const float *v1, const float *v2, int fNoMonsters, int hullNumber, edict_t *pentToSkip, TraceResult *ptr);\n    EngFunc_TraceModel,                    // void )            (const float *v1, const float *v2, int hullNumber, edict_t *pent, TraceResult *ptr);\n    EngFunc_TraceTexture,                // const char *)    (edict_t *pTextureEntity, const float *v1, const float *v2 );\n    EngFunc_TraceSphere,                // void )            (const float *v1, const float *v2, int fNoMonsters, float radius, edict_t *pentToSkip, TraceResult *ptr);\n    \n    EngFunc_GetAimVector,                // void )            (edict_t *ent, float speed, float *rgflReturn);\n    EngFunc_ParticleEffect,                // void )            (const float *org, const float *dir, float color, float count);\n    EngFunc_LightStyle,                    // void )            (int style, char *val);\n    EngFunc_DecalIndex,                    // int  )            (const char *name);\n    EngFunc_PointContents,                // int  )            (const float *rgflVector);\n    EngFunc_FreeEntPrivateData,            // void )            (edict_t *pEdict);\n    EngFunc_SzFromIndex,                // const char *)    (int iString);\n    EngFunc_AllocString,                // int  )            (const char *szValue);\n    EngFunc_RegUserMsg,                    // int    )            (const char *pszName, int iSize);\n    EngFunc_AnimationAutomove,            // void )            (const edict_t *pEdict, float flTime);\n    EngFunc_GetBonePosition,            // void )            (const edict_t *pEdict, int iBone, float *rgflOrigin, float *rgflAngles);\n    EngFunc_GetAttachment,                // void    )            (const edict_t *pEdict, int iAttachment, float *rgflOrigin, float *rgflAngles);\n    EngFunc_SetView,                    // void )            (const edict_t *pClient, const edict_t *pViewent);\n    EngFunc_Time,                        // float)            ( void );\n    EngFunc_CrosshairAngle,                // void )            (const edict_t *pClient, float pitch, float yaw);\n    EngFunc_FadeClientVolume,            // void )            (const edict_t *pEdict, int fadePercent, int fadeOutSeconds, int holdTime, int fadeInSeconds);\n    EngFunc_SetClientMaxspeed,            // void )            (const edict_t *pEdict, float fNewMaxspeed);\n    EngFunc_CreateFakeClient,            // edict)            (const char *netname);    // returns NULL if fake client can't be created\n    EngFunc_RunPlayerMove,                // void )            (edict_t *fakeclient, const float *viewangles, float forwardmove, float sidemove, float upmove, unsigned short buttons, byte impulse, byte msec);\n    EngFunc_NumberOfEntities,            // int  )            ( void );\n    EngFunc_StaticDecal,                // void )            (const float *origin, int decalIndex, int entityIndex, int modelIndex);\n    EngFunc_PrecacheGeneric,            // int  )            (char* s);\n    EngFunc_BuildSoundMsg,                // void )            (edict_t *entity, int channel, const char *sample, /*int*/float volume, float attenuation, int fFlags, int pitch, int msg_dest, int msg_type, const float *pOrigin, edict_t *ed);\n    EngFunc_GetPhysicsKeyValue,            // const char *)    (const edict_t *pClient, const char *key);\n    EngFunc_SetPhysicsKeyValue,            // void )            (const edict_t *pClient, const char *key, const char *value);\n    EngFunc_GetPhysicsInfoString,        // const char *)    (const edict_t *pClient);\n    EngFunc_PrecacheEvent,                // unsigned short)    (int type, const char*psz);\n    EngFunc_PlaybackEvent,                // void )            (int flags, const edict_t *pInvoker, unsigned short eventindex, float delay, float *origin, float *angles, float fparam1, float fparam2, int iparam1, int iparam2, int bparam1, int bparam2);\n    EngFunc_CheckVisibility,            // int  )            (const edict_t *entity, unsigned char *pset);\n    EngFunc_GetCurrentPlayer,            // int  )            ( void );\n    EngFunc_CanSkipPlayer,                // int  )            (const edict_t *player);\n    EngFunc_SetGroupMask,                // void )            (int mask, int op);\n    EngFunc_GetClientListening,            // bool )            (int iReceiver, int iSender)\n    EngFunc_SetClientListening,            // bool )            (int iReceiver, int iSender, bool Listen)\n    EngFunc_MessageBegin,                // void )            (int msg_dest, int msg_type, const float *pOrigin, edict_t *ed)\n    EngFunc_WriteCoord,                    // void )            (float flValue)\n    EngFunc_WriteAngle,                    // void )            (float flValue)\n    EngFunc_InfoKeyValue,                // char*)            (char *infobuffer, char *key);\n    EngFunc_SetKeyValue,                // void )            (char *infobuffer, char *key, char *value);\n    EngFunc_SetClientKeyValue,            // void )            (int clientIndex, char *infobuffer, char *key, char *value);\n    EngFunc_CreateInstBaseline,            // int  )            (int classname, struct entity_state_s *baseline);\n    \n    // Returns pointer to info buffer that can be used with the infobuffer param of InfoKeyValue, SetKeyValue, and SetClientKeyValue\n    EngFunc_GetInfoKeyBuffer,            // char*)            (edict_t *e);\n    EngFunc_AlertMessage,                // void )            (ALERT_TYPE atype, char *szFmt, ...);\n    EngFunc_ClientPrintf,                // void )            (edict_t* pEdict, PRINT_TYPE ptype, const char *szMsg);\n    EngFunc_ServerPrint                    // void )            (const char *szMsg);\n};"
        },
        {
            "Comment": "Used with dllfunc()",
            "CommentTags": [],
            "Constant": "enum\n{\n    DLLFunc_GameInit,                    // void )            ( void );                \n    DLLFunc_Spawn,                        // int  )            (edict_t *pent);\n    DLLFunc_Think,                        // void )            (edict_t *pent);\n    DLLFunc_Use,                        // void )            (edict_t *pentUsed, edict_t *pentOther);\n    DLLFunc_Touch,                        // void )            (edict_t *pentTouched, edict_t *pentOther);\n    DLLFunc_Blocked,                    // void )            (edict_t *pentBlocked, edict_t *pentOther);\n    \n    //You can pass in 0 for glb kvd handle or a kvd handle here\n    DLLFunc_KeyValue,                    // void )            (edict_t *pentKeyvalue, KeyValueData *pkvd);\n    DLLFunc_SetAbsBox,                    // void )            (edict_t *pent);\n    DLLFunc_ClientConnect,                // bool )            (edict_t *pEntity, const char *pszName, const char *pszAddress, char szRejectReason[128]);\n    \n    DLLFunc_ClientDisconnect,            // void )            (edict_t *pEntity);\n    DLLFunc_ClientKill,                    // void )            (edict_t *pEntity);\n    DLLFunc_ClientPutInServer,            // void )            (edict_t *pEntity);\n    DLLFunc_ClientCommand,                // void )            (edict_t *pEntity);\n\n    DLLFunc_ServerDeactivate,            // void )            ( void );\n\n    DLLFunc_PlayerPreThink,                // void )            (edict_t *pEntity);\n    DLLFunc_PlayerPostThink,            // void )            (edict_t *pEntity);\n\n    DLLFunc_StartFrame,                    // void )            ( void );\n    DLLFunc_ParmsNewLevel,                // void )            ( void );\n    DLLFunc_ParmsChangeLevel,            // void )            ( void );\n\n    // Returns string describing current .dll.  E.g., TeamFotrress 2, Half-Life\n    // This also gets called when the server is queried for information (for example, by a server browser tool)\n    DLLFunc_GetGameDescription,             // const char *)    ( void );     \n\n    // Spectator funcs\n    DLLFunc_SpectatorConnect,            // void )            (edict_t *pEntity);\n    DLLFunc_SpectatorDisconnect,        // void )            (edict_t *pEntity);\n    DLLFunc_SpectatorThink,                // void )            (edict_t *pEntity);\n\n    // Notify game .dll that engine is going to shut down.  Allows mod authors to set a breakpoint.\n    DLLFunc_Sys_Error,                    // void )            (const char *error_string);\n\n    DLLFunc_PM_FindTextureType,            // char )            (char *name);\n    DLLFunc_RegisterEncoders,            // void )            ( void );\n\n    // Enumerates player hulls.  Returns 0 if the hull number doesn't exist, 1 otherwise\n    DLLFunc_GetHullBounds,                // int  )            (int hullnumber, float *mins, float *maxs);\n\n    // Create baselines for certain \"unplaced\" items.\n    DLLFunc_CreateInstBaselines,        // void )            ( void );\n    DLLFunc_pfnAllowLagCompensation,    // int  )            ( void );\n    // I know this does not fit with DLLFUNC(), but I don't want another native just for it.\n    MetaFunc_CallGameEntity,            // bool    )            (plid_t plid, const char *entStr,entvars_t *pev);\n    DLLFunc_ClientUserInfoChanged,        // void    )            (edict *pEntity, char *infobuffer);\n    // You can pass in 0 for global cd handle or another cd handle here\n    DLLFunc_UpdateClientData,            // void )            (const struct edict_s *ent, int sendweapons, struct clientdata_s *cd);\n    // You can pass in 0 for global entity state handle or another entity state handle here\n    DLLFunc_AddToFullPack,                // int  )            (struct entity_state_s *state, int e, edict_t *ent, edict_t *host, int hostflags, int player, unsigned char *pSet);\n    // You can pass in 0 for global usercmd handle or another usercmd handle here\n    DLLFunc_CmdStart,                    // void )            (const edict_t *player, const struct usercmd_s *cmd, unsigned int random_seed);\n    DLLFunc_CmdEnd,                        // void )            (const edict_t *player);\n    DLLFunc_CreateBaseline                // void )            (int player, int eindex, struct entity_state_s *baseline, struct edict_s *entity, int playermodelindex, vec3_t player_mins, vec3_t player_maxs);\n};\n\nenum {\n    pev_string_start = 0,\n    pev_classname,\n    pev_globalname,\n    pev_model,\n    pev_target,\n    pev_targetname,\n    pev_netname,\n    pev_message,\n    pev_noise,\n    pev_noise1,\n    pev_noise2,\n    pev_noise3,\n    pev_string_end,\n    pev_edict_start,\n    pev_chain,\n    pev_dmg_inflictor,\n    pev_enemy,\n    pev_aiment,\n    pev_owner,\n    pev_groundentity,\n    pev_euser1,\n    pev_euser2,\n    pev_euser3,\n    pev_euser4,\n    pev_edict_end,\n    pev_float_start,\n    pev_impacttime,\n    pev_starttime,\n    pev_idealpitch,\n    pev_ideal_yaw,\n    pev_pitch_speed,\n    pev_yaw_speed,\n    pev_ltime,\n    pev_nextthink,\n    pev_gravity,\n    pev_friction,\n    pev_frame,\n    pev_animtime,\n    pev_framerate,\n    pev_scale,\n    pev_renderamt,\n    pev_health,\n    pev_frags,\n    pev_takedamage,\n    pev_max_health,\n    pev_teleport_time,\n    pev_armortype,\n    pev_armorvalue,\n    pev_dmg_take,\n    pev_dmg_save,\n    pev_dmg,\n    pev_dmgtime,\n    pev_speed,\n    pev_air_finished,\n    pev_pain_finished,\n    pev_radsuit_finished,\n    pev_maxspeed,\n    pev_fov,\n    pev_flFallVelocity,\n    pev_fuser1,\n    pev_fuser2,\n    pev_fuser3,\n    pev_fuser4,\n    pev_float_end,\n    pev_int_start,\n    pev_fixangle,\n    pev_modelindex,\n    pev_viewmodel,\n    pev_weaponmodel,\n    pev_movetype,\n    pev_solid,\n    pev_skin,\n    pev_body,\n    pev_effects,\n    pev_light_level,\n    pev_sequence,\n    pev_gaitsequence,\n    pev_rendermode,\n    pev_renderfx,\n    pev_weapons,\n    pev_deadflag,\n    pev_button,\n    pev_impulse,\n    pev_spawnflags,\n    pev_flags,\n    pev_colormap,\n    pev_team,\n    pev_waterlevel,\n    pev_watertype,\n    pev_playerclass,\n    pev_weaponanim,\n    pev_pushmsec,\n    pev_bInDuck,\n    pev_flTimeStepSound,\n    pev_flSwimTime,\n    pev_flDuckTime,\n    pev_iStepLeft,\n    pev_gamestate,\n    pev_oldbuttons,\n    pev_groupinfo,\n    pev_iuser1,\n    pev_iuser2,\n    pev_iuser3,\n    pev_iuser4,\n    pev_int_end,\n    pev_byte_start,\n    pev_controller_0,\n    pev_controller_1,\n    pev_controller_2,\n    pev_controller_3,\n    pev_blending_0,\n    pev_blending_1,\n    pev_byte_end,\n    pev_bytearray_start,\n    pev_controller,\n    pev_blending,\n    pev_bytearray_end,\n    pev_vecarray_start,\n    pev_origin,\n    pev_oldorigin,\n    pev_velocity,\n    pev_basevelocity,\n    pev_clbasevelocity,\n    pev_movedir,\n    pev_angles,\n    pev_avelocity,\n    pev_v_angle,\n    pev_endpos,\n    pev_startpos,\n    pev_absmin,\n    pev_absmax,\n    pev_mins,\n    pev_maxs,\n    pev_size,\n    pev_rendercolor,\n    pev_view_ofs,\n    pev_vuser1,\n    pev_vuser2,\n    pev_vuser3,\n    pev_vuser4,\n    pev_punchangle,\n    pev_vecarray_end,\n    pev_string2_begin,    /* anything after here are string corrections */\n    pev_weaponmodel2,\n    pev_viewmodel2,\n    pev_string2_end,\n    pev_edict2_start,    /* edict corrections */\n    pev_pContainingEntity,\n    pev_absolute_end\n};"
        },
        {
            "Comment": "Used with global_get()",
            "CommentTags": [],
            "Constant": "enum\n{\n    glb_start_int = 0, \n    glb_trace_hitgroup, \n    glb_trace_flags, \n    glb_msg_entity, \n    glb_cdAudioTrack, \n    glb_maxClients, \n    glb_maxEntities, \n    glb_end_int, \n    glb_start_float, \n    glb_time, \n    glb_frametime, \n    glb_force_retouch, \n    glb_deathmatch, \n    glb_coop, \n    glb_teamplay, \n    glb_serverflags, \n    glb_found_secrets, \n    glb_trace_allsolid, \n    glb_trace_startsolid, \n    glb_trace_fraction, \n    glb_trace_plane_dist, \n    glb_trace_inopen, \n    glb_trace_inwater, \n    glb_end_float, \n    glb_start_edict, \n    glb_trace_ent, \n    glb_end_edict, \n    glb_start_vector, \n    glb_v_forward, \n    glb_v_up, \n    glb_v_right, \n    glb_trace_endpos, \n    glb_trace_plane_normal, \n    glb_vecLandmarkOffset,\n    glb_end_vector,\n    glb_start_string, \n    glb_mapname, \n    glb_startspot, \n    glb_end_string, \n    glb_start_pchar, \n    glb_pStringBase, \n    glb_end_pchar\n};"
        },
        {
            "Comment": "Used with register_forward()",
            "CommentTags": [],
            "Constant": "enum {\n    FM_PrecacheModel = 1,\n    FM_PrecacheSound,\n    FM_SetModel,    \n    FM_ModelIndex,\n    FM_ModelFrames,\n    FM_SetSize,\n    FM_ChangeLevel,\n    FM_VecToYaw,\n    FM_VecToAngles,\n    FM_MoveToOrigin,\n    FM_ChangeYaw,\n    FM_ChangePitch,\n    FM_FindEntityByString,\n    FM_GetEntityIllum,\n    FM_FindEntityInSphere,\n    FM_FindClientInPVS,\n    FM_EntitiesInPVS,\n    FM_MakeVectors,\n    FM_AngleVectors,\n    FM_CreateEntity,\n    FM_RemoveEntity,\n    FM_CreateNamedEntity,\n    FM_MakeStatic,\n    FM_EntIsOnFloor,\n    FM_DropToFloor,\n    FM_WalkMove,\n    FM_SetOrigin,\n    FM_EmitSound,\n    FM_EmitAmbientSound,\n    FM_TraceLine,\n    FM_TraceToss,\n    FM_TraceMonsterHull,\n    FM_TraceHull,\n    FM_TraceModel,\n    FM_TraceTexture,\n    FM_TraceSphere,\n    FM_GetAimVector,\n    FM_ParticleEffect,\n    FM_LightStyle,\n    FM_DecalIndex,\n    FM_PointContents,\n    FM_MessageBegin,\n    FM_MessageEnd,\n    FM_WriteByte,\n    FM_WriteChar,\n    FM_WriteShort,\n    FM_WriteLong,\n    FM_WriteAngle,\n    FM_WriteCoord,\n    FM_WriteString,\n    FM_WriteEntity,\n    FM_CVarGetFloat,\n    FM_CVarGetString,\n    FM_CVarSetFloat,\n    FM_CVarSetString,\n    FM_FreeEntPrivateData,\n    FM_SzFromIndex,\n    FM_AllocString,\n    FM_RegUserMsg,\n    FM_AnimationAutomove,\n    FM_GetBonePosition,\n    FM_GetAttachment,\n    FM_SetView,\n    FM_Time,\n    FM_CrosshairAngle,\n    FM_FadeClientVolume,\n    FM_SetClientMaxspeed,\n    FM_CreateFakeClient,\n    FM_RunPlayerMove,\n    FM_NumberOfEntities,\n    FM_StaticDecal,\n    FM_PrecacheGeneric,\n    FM_BuildSoundMsg,\n    FM_GetPhysicsKeyValue,\n    FM_SetPhysicsKeyValue,\n    FM_GetPhysicsInfoString,\n    FM_PrecacheEvent,\n    FM_PlaybackEvent,\n    FM_CheckVisibility,\n    FM_GetCurrentPlayer,\n    FM_CanSkipPlayer,\n    FM_SetGroupMask,\n    FM_Voice_GetClientListening,\n    FM_Voice_SetClientListening,\n    FM_InfoKeyValue,\n    FM_SetKeyValue,\n    FM_SetClientKeyValue,\n    FM_GetPlayerAuthId,\n    FM_GetPlayerWONId,\n    FM_IsMapValid,\n\n    FM_Spawn,\n    FM_Think,\n    FM_Use,\n    FM_Touch,\n    FM_Blocked,\n    FM_KeyValue,\n    FM_SetAbsBox,\n    FM_ClientConnect,\n    \n    FM_ClientDisconnect,\n    FM_ClientKill,\n    FM_ClientPutInServer,\n    FM_ClientCommand,\n\n    FM_ServerDeactivate,\n\n    FM_PlayerPreThink,\n    FM_PlayerPostThink,\n\n    FM_StartFrame,\n    FM_ParmsNewLevel,\n    FM_ParmsChangeLevel,\n\n    // Returns string describing current .dll.  E.g., TeamFotrress 2, Half-Life\n    // This also gets called when the server is queried for information (for example, by a server browser tool)\n    FM_GetGameDescription,\n\n    // Spectator funcs\n    FM_SpectatorConnect,\n    FM_SpectatorDisconnect,\n    FM_SpectatorThink,\n\n    // Notify game .dll that engine is going to shut down.  Allows mod authors to set a breakpoint.\n    FM_Sys_Error,\n\n    FM_PM_FindTextureType,\n    FM_RegisterEncoders,\n\n    // Create baselines for certain \"unplaced\" items.\n    FM_CreateInstBaselines,\n    \n    FM_AllowLagCompensation,\n    FM_AlertMessage,\n    \n    // NEW_DLL_FUNCTIONS:\n    FM_OnFreeEntPrivateData,\n    FM_GameShutdown,\n    FM_ShouldCollide,\n    \n    // LATE ADDITIONS (v1.71)\n    FM_ClientUserInfoChanged,\n    \n    // LATE ADDITIONS (v1.75)\n    FM_UpdateClientData,\n    FM_AddToFullPack,\n    FM_CmdStart,\n    FM_CmdEnd,\n    FM_CreateInstBaseline,\n    FM_CreateBaseline,\n    FM_GetInfoKeyBuffer,\n    FM_ClientPrintf,\n    \n    // LATE ADDITIONS (v1.80)\n    FM_ServerPrint\n};\n\nenum TraceResult\n{\n    TR_AllSolid,        // int\n    TR_StartSolid,        // int\n    TR_InOpen,            // int\n    TR_InWater,            // int\n    TR_flFraction,        // float\n    TR_vecEndPos,        // float array[3]\n    TR_flPlaneDist,        // float\n    TR_vecPlaneNormal,    // float array[3]\n    TR_pHit,            // int (edict_t*)\n    TR_iHitgroup,        // int\n};\n\nenum KeyValueData\n{\n    KV_ClassName,        // string\n    KV_KeyName,            // string\n    KV_Value,            // string\n    KV_fHandled            // int\n};\n\nenum ClientData\n{\n    CD_Origin,            // float array[3]\n    CD_Velocity,        // float array[3]\n    CD_ViewModel,        // int\n    CD_PunchAngle,        // float array[3]\n    CD_Flags,            // int\n    CD_WaterLevel,        // int\n    CD_WaterType,        // int\n    CD_ViewOfs,            // float array[3]\n    CD_Health,            // float\n    CD_bInDuck,            // int\n    CD_Weapons,            // int\n    CD_flTimeStepSound,    // int\n    CD_flDuckTime,        // int\n    CD_flSwimTime,        // int\n    CD_WaterJumpTime,    // int\n    CD_MaxSpeed,        // float\n    CD_FOV,                // float\n    CD_WeaponAnim,        // int\n    CD_ID,                // int\n    CD_AmmoShells,        // int\n    CD_AmmoNails,        // int\n    CD_AmmoCells,        // int\n    CD_AmmoRockets,        // int\n    CD_flNextAttack,    // float\n    CD_tfState,            // int\n    CD_PushMsec,        // int\n    CD_DeadFlag,        // int\n    CD_PhysInfo,        // string[256]\n    CD_iUser1,            // int\n    CD_iUser2,            // int\n    CD_iUser3,            // int\n    CD_iUser4,            // int\n    CD_fUser1,            // float\n    CD_fUser2,            // float\n    CD_fUser3,            // float\n    CD_fUser4,            // float\n    CD_vUser1,            // float array[3]\n    CD_vUser2,            // float array[3]\n    CD_vUser3,            // float array[3]\n    CD_vUser4            // float array[3]\n};\n\nenum EntityState\n{\n    // Fields which are filled in by routines outside of delta compression\n    ES_EntityType,        // int\n    // Index into cl_entities array for this entity\n    ES_Number,            // int\n    ES_MsgTime,            // float\n    \n    // Message number last time the player/entity state was updated\n    ES_MessageNum,        // int\n    \n    // Fields which can be transitted and reconstructed over the network stream\n    ES_Origin,            // float array[3]\n    ES_Angles,            // float array[3]\n    \n    ES_ModelIndex,        // int\n    ES_Sequence,        // int\n    ES_Frame,            // float\n    ES_ColorMap,        // int\n    ES_Skin,            // short\n    ES_Solid,            // short\n    ES_Effects,            // int \n    ES_Scale,            // float\n    ES_eFlags,            // byte\n    \n    // Render information\n    ES_RenderMode,        // int\n    ES_RenderAmt,        // int\n    ES_RenderColor,        // byte array[3], RGB value\n    ES_RenderFx,        // int\n    \n    ES_MoveType,        // int\n    ES_AnimTime,        // float\n    ES_FrameRate,        // float\n    ES_Body,            // int\n    ES_Controller,        // byte array[4]\n    ES_Blending,        // byte array[4]\n    ES_Velocity,        // float array[3]\n    \n    // Send bbox down to client for use during prediction\n    ES_Mins,            // float array[3]\n    ES_Maxs,            // float array[3]\n    \n    ES_AimEnt,            // int\n    // If owned by a player, the index of that player (for projectiles)\n    ES_Owner,            // int\n    \n    // Friction, for prediction\n    ES_Friction,        // float\n    // Gravity multiplier\n    ES_Gravity,            // float\n    \n    // PLAYER SPECIFIC\n    ES_Team,            // int\n    ES_PlayerClass,        // int\n    ES_Health,            // int\n    ES_Spectator,        // bool\n    ES_WeaponModel,        // int\n    ES_GaitSequence,    // int\n    // If standing on conveyor, e.g.\n    ES_BaseVelocity,    // float array[3]\n    // Use the crouched hull, or the regular player hull\n    ES_UseHull,            // int\n    // Latched buttons last time state updated\n    ES_OldButtons,        // int\n    // -1 = in air, else pmove entity number\n    ES_OnGround,        // int\n    ES_iStepLeft,        // int\n    // How fast we are falling\n    ES_flFallVelocity,    // float\n    \n    ES_FOV,                // float\n    ES_WeaponAnim,        // int    \n    \n    // Parametric movement overrides\n    ES_StartPos,        // float array[3]\n    ES_EndPos,            // float array[3]\n    ES_ImpactTime,        // float\n    ES_StartTime,        // float\n    \n    // For mods\n    ES_iUser1,            // int\n    ES_iUser2,            // int\n    ES_iUser3,            // int\n    ES_iUser4,            // int\n    ES_fUser1,            // float\n    ES_fUser2,            // float\n    ES_fUser3,            // float\n    ES_fUser4,            // float\n    ES_vUser1,            // float array[3]\n    ES_vUser2,            // float array[3]\n    ES_vUser3,            // float array[3]\n    ES_vUser4            // float array[3]\n};\n\nenum UserCmd\n{\n    // Interpolation time on client\n    UC_LerpMsec,        // short\n    // Duration in ms of command\n    UC_Msec,            // byte\n    // Command view angles\n    UC_ViewAngles,        // float array[3]\n    \n    // Intended velocities\n    // Forward velocity\n    UC_ForwardMove,        // float\n    // Sideways velocity\n    UC_SideMove,        // float\n    // Upward velocity\n    UC_UpMove,            // float\n    // Light level at spot where we are standing\n    UC_LightLevel,        // byte\n    // Attack buttons\n    UC_Buttons,            // unsigned short\n    // Impulse command issued\n    UC_Impulse,            // byte\n    // Current weapon id\n    UC_WeaponSelect,    // byte\n    \n    // Experimental player impact stuff\n    UC_ImpactIndex,        // int\n    UC_ImpactPosition    // float array[3]\n};\n\nenum AlertType\n{\n    at_notice = 0,\n    at_console,        // same as at_notice, but forces a ConPrintf, not a message box\n    at_aiconsole,    // same as at_console, but only shown if developer level is 2!\n    at_warning,\n    at_error,\n    at_logged        // Server print to console (only in multiplayer games)\n};"
        }
    ]
}