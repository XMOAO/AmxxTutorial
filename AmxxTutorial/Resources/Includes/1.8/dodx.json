{
    "functions": [
        {
            "Comment": "Use this function to register forwards",
            "CommentTags": [],
            "FunctionName": "register_statsfwd",
            "Function": "native register_statsfwd(ftype);"
        },
        {
            "Comment": "Function is called after player to player attacks ,\nif players were damaged by teammate TA is set to 1",
            "CommentTags": [],
            "FunctionName": "client_damage",
            "Function": "forward client_damage(attacker, victim, damage, wpnindex, hitplace, TA);"
        },
        {
            "Comment": "Function is called after player death ,\nif player was killed by teammate TK is set to 1",
            "CommentTags": [],
            "FunctionName": "client_death",
            "Function": "forward client_death(killer, victim, wpnindex, hitplace, TK);"
        },
        {
            "Comment": "Function is called if player scored",
            "CommentTags": [],
            "FunctionName": "client_score",
            "Function": "forward client_score(id, score, total);"
        },
        {
            "Comment": "This Forward is called when a player changes team",
            "CommentTags": [],
            "FunctionName": "dod_client_changeteam",
            "Function": "forward dod_client_changeteam(id, team, oldteam);"
        },
        {
            "Comment": "This Forward is called if a player changes class, but just after spawn",
            "CommentTags": [],
            "FunctionName": "dod_client_changeclass",
            "Function": "forward dod_client_changeclass(id, class, oldclass);"
        },
        {
            "Comment": "This Forward is called when a player spawns",
            "CommentTags": [],
            "FunctionName": "dod_client_spawn",
            "Function": "forward dod_client_spawn(id);"
        },
        {
            "Comment": "This will be called whenever a player scopes or unscopes\nvalue = 1 scope up\nvalue = 0 scope down",
            "CommentTags": [],
            "FunctionName": "dod_client_scope",
            "Function": "forward dod_client_scope(id, value);"
        },
        {
            "Comment": "This will be called whenever a player drops a weapon\nweapon is weapon dropped or picked up\nvalue = 1 picked up\nvalue = 0 dropped",
            "CommentTags": [],
            "FunctionName": "dod_client_weaponpickup",
            "Function": "forward dod_client_weaponpickup(id, weapon, value);"
        },
        {
            "Comment": "Called whenever the the player goes to or comes from prone position\nvalue = 1 going down\nvalue = 0 getting up",
            "CommentTags": [],
            "FunctionName": "dod_client_prone",
            "Function": "forward dod_client_prone(id, value);"
        },
        {
            "Comment": "This will be called whenever a player switches a weapon",
            "CommentTags": [],
            "FunctionName": "dod_client_weaponswitch",
            "Function": "forward dod_client_weaponswitch(id, wpnew, wpnold);"
        },
        {
            "Comment": "Forward for when a grenade explodes and its location",
            "CommentTags": [],
            "FunctionName": "dod_grenade_explosion",
            "Function": "forward dod_grenade_explosion(id, pos[3], wpnid);"
        },
        {
            "Comment": "Forward for when a rocket explodes and its location",
            "CommentTags": [],
            "FunctionName": "dod_rocket_explosion",
            "Function": "forward dod_rocket_explosion(id, pos[3], wpnid);"
        },
        {
            "Comment": "Forward for when a player picks up a object",
            "CommentTags": [],
            "FunctionName": "dod_client_objectpickup",
            "Function": "forward dod_client_objectpickup(id, objid, pos[3], value);"
        },
        {
            "Comment": "Forward for when a users stamina decreases",
            "CommentTags": [],
            "FunctionName": "dod_client_stamina",
            "Function": "forward dod_client_stamina(id, stamina);"
        },
        {
            "Comment": "We want to get just the weapon of whichever type that the player is on him\nUse DODWT_* in dodconst.inc for type",
            "CommentTags": [],
            "FunctionName": "dod_weapon_type",
            "Function": "native dod_weapon_type(id, type);"
        },
        {
            "Comment": "This native will change the position of a weapon within the users slots and its ammo ammount",
            "CommentTags": [],
            "FunctionName": "dod_set_weaponlist",
            "Function": "native dod_set_weaponlist(id, wpnID, slot, dropslot, totalrds);"
        },
        {
            "Comment": "Sets the model for a player",
            "CommentTags": [],
            "FunctionName": "dod_set_model",
            "Function": "native dod_set_model(id, const model[]);"
        },
        {
            "Comment": "Sets the model for a player",
            "CommentTags": [],
            "FunctionName": "dod_set_body_number",
            "Function": "native dod_set_body_number(id, bodynumber);"
        },
        {
            "Comment": "Un-Sets the model for a player",
            "CommentTags": [],
            "FunctionName": "dod_clear_model",
            "Function": "native dod_clear_model(id);"
        },
        {
            "Comment": "function will return index of new weapon",
            "CommentTags": [],
            "FunctionName": "custom_weapon_add",
            "Function": "native custom_weapon_add( const wpnname[], melee = 0, const logname[]=\"\" );"
        },
        {
            "Comment": "Function will pass damage done by this custom weapon to stats module and other plugins",
            "CommentTags": [],
            "FunctionName": "custom_weapon_dmg",
            "Function": "native custom_weapon_dmg( weapon, att, vic, damage, hitplace=0 );"
        },
        {
            "Comment": "Function will pass info about custom weapon shot to stats module",
            "CommentTags": [],
            "FunctionName": "custom_weapon_shot",
            "Function": "native custom_weapon_shot( weapon, index ); // weapon id , player id"
        },
        {
            "Comment": "function will return 1 if true",
            "CommentTags": [],
            "FunctionName": "xmod_is_melee_wpn",
            "Function": "native xmod_is_melee_wpn(wpnindex);"
        },
        {
            "Comment": "Returns weapon name.",
            "CommentTags": [],
            "FunctionName": "xmod_get_wpnname",
            "Function": "native xmod_get_wpnname(wpnindex, name[], len);"
        },
        {
            "Comment": "Returns weapon logname.",
            "CommentTags": [],
            "FunctionName": "xmod_get_wpnlogname",
            "Function": "native xmod_get_wpnlogname(wpnindex, name[], len);"
        },
        {
            "Comment": "Returns weapons array size",
            "CommentTags": [],
            "FunctionName": "xmod_get_maxweapons",
            "Function": "native xmod_get_maxweapons();"
        },
        {
            "Comment": "Returns stats array size ex. 8 in TS , 9 in DoD",
            "CommentTags": [],
            "FunctionName": "xmod_get_stats_size",
            "Function": "native xmod_get_stats_size();"
        },
        {
            "Comment": "Returns 1 if true",
            "CommentTags": [],
            "FunctionName": "xmod_is_custom_wpn",
            "Function": "native xmod_is_custom_wpn(wpnindex);"
        },
        {
            "Comment": "weapon logname to weapon name convertion",
            "CommentTags": [],
            "FunctionName": "dod_wpnlog_to_name",
            "Function": "native dod_wpnlog_to_name(const logname[],name[],len);"
        },
        {
            "Comment": "weapon logname to weapon index convertion",
            "CommentTags": [],
            "FunctionName": "dod_wpnlog_to_id",
            "Function": "native dod_wpnlog_to_id(const logname[]);"
        },
        {
            "Comment": "This function has no description.",
            "CommentTags": [],
            "Function": "native dod_get_map_info( info );",
            "FunctionName": "dod_get_map_info"
        },
        {
            "Comment": "Returns id of currently carried weapon. Gets also\nammount of ammo in clip and backpack.",
            "CommentTags": [],
            "FunctionName": "dod_get_user_weapon",
            "Function": "native dod_get_user_weapon(index,&clip=0,&ammo=0);"
        },
        {
            "Comment": "Returns team score",
            "CommentTags": [],
            "FunctionName": "dod_get_team_score",
            "Function": "native dod_get_team_score(teamId);"
        },
        {
            "Comment": "Returns player class id",
            "CommentTags": [],
            "FunctionName": "dod_get_user_class",
            "Function": "native dod_get_user_class(index);"
        },
        {
            "Comment": "Returns player score",
            "CommentTags": [],
            "FunctionName": "dod_get_user_score",
            "Function": "native dod_get_user_score(index);"
        },
        {
            "Comment": "values are: 0-no prone, 1-prone, 2-prone + w_deploy",
            "CommentTags": [],
            "FunctionName": "dod_get_pronestate",
            "Function": "native dod_get_pronestate(index);"
        },
        {
            "Comment": "It is not as safe as original but player deaths will not be increased",
            "CommentTags": [],
            "FunctionName": "dod_user_kill",
            "Function": "native dod_user_kill(index);"
        }
    ],
    "constants": [
        {
            "Comment": "*********** Shared Natives Start *******************************",
            "CommentTags": [],
            "Constant": ""
        },
        {
            "Comment": "Forward types",
            "CommentTags": [],
            "Constant": "enum {\n  XMF_DAMAGE = 0,\n  XMF_DEATH,\n  XMF_SCORE,\n};"
        },
        {
            "Comment": "Custom Weapon Support",
            "CommentTags": [],
            "Constant": ""
        },
        {
            "Comment": "*********** Shared Natives End *******************************",
            "CommentTags": [],
            "Constant": ""
        }
    ]
}