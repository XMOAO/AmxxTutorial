{
    "functions": [],
    "constants": [
        {
            "Comment": "Destination types for message_begin()",
            "CommentTags": [],
            "Constant": "#define    MSG_BROADCAST               0        // Unreliable to all\n#define    MSG_ONE                     1        // Reliable to one (msg_entity)\n#define    MSG_ALL                     2        // Reliable to all\n#define    MSG_INIT                    3        // Write to the init string\n#define MSG_PVS                     4        // Ents in PVS of org\n#define MSG_PAS                     5        // Ents in PAS of org\n#define MSG_PVS_R                   6        // Reliable to PVS\n#define MSG_PAS_R                   7        // Reliable to PAS\n#define MSG_ONE_UNRELIABLE          8        // Send to one client, but don't put in reliable stream, put in unreliable datagram (could be dropped)\n#define    MSG_SPEC                    9        // Sends to all spectator proxies"
        },
        {
            "Comment": "Hardcoded message types for message_begin()\nLook in the actual HLSDK for details!",
            "CommentTags": [],
            "Constant": "#define SVC_NOP                        1\n#define SVC_DISCONNECT                2\n#define SVC_EVENT                    3\n#define SVC_VERSION                    4\n#define SVC_SETVIEW                    5\n#define SVC_SOUND                    6\n#define SVC_TIME                    7\n#define SVC_PRINT                    8\n#define SVC_STUFFTEXT                9\n#define SVC_SETANGLE                10\n#define SVC_SERVERINFO                11\n#define SVC_LIGHTSTYLE                12\n#define SVC_UPDATEUSERINFO            13\n#define SVC_DELTADESCRIPTION        14\n#define SVC_CLIENTDATA                15\n#define SVC_STOPSOUND                16\n#define SVC_PINGS                    17\n#define SVC_PARTICLE                18\n#define SVC_DAMAGE                    19\n#define SVC_SPAWNSTATIC                20\n#define SVC_EVENT_RELIABLE            21\n#define SVC_SPAWNBASELINE            22\n#define SVC_TEMPENTITY                23\n#define SVC_SETPAUSE                24\n#define SVC_SIGNONNUM                25\n#define SVC_CENTERPRINT                26\n#define SVC_KILLEDMONSTER            27\n#define SVC_FOUNDSECRET                28\n#define SVC_SPAWNSTATICSOUND        29\n#define SVC_INTERMISSION            30\n#define SVC_FINALE                    31\n#define SVC_CDTRACK                    32\n#define SVC_RESTORE                    33\n#define SVC_CUTSCENE                34\n#define SVC_WEAPONANIM                35\n#define SVC_DECALNAME                36\n#define SVC_ROOMTYPE                37\n#define SVC_ADDANGLE                38\n#define SVC_NEWUSERMSG                39\n#define SVC_PACKETENTITIES            40\n#define SVC_DELTAPACKETENTITIES        41\n#define SVC_CHOKE                    42\n#define SVC_RESOURCELIST            43\n#define SVC_NEWMOVEVARS                44\n#define SVC_RESOURCEREQUEST            45\n#define SVC_CUSTOMIZATION            46\n#define SVC_CROSSHAIRANGLE            47\n#define SVC_SOUNDFADE                48\n#define SVC_FILETXFERFAILED            49\n#define SVC_HLTV                    50\n#define SVC_DIRECTOR                51\n#define SVC_VOICEINIT                52\n#define SVC_VOICEDATA                53\n#define SVC_SENDEXTRAINFO            54\n#define SVC_TIMESCALE                55"
        },
        {
            "Comment": "Message flags for set_msg_block()",
            "CommentTags": [],
            "Constant": "#define BLOCK_NOT                   0\n#define BLOCK_ONCE                  1\n#define BLOCK_SET                   2"
        },
        {
            "Comment": "Used with get_msg_argtype() and set_msg_arg_",
            "CommentTags": [],
            "Constant": "enum\n{\n    ARG_BYTE = 1,       /* int */\n    ARG_CHAR,           /* int */\n    ARG_SHORT,          /* int */\n    ARG_LONG,           /* int */\n    ARG_ANGLE,          /* float */\n    ARG_COORD,          /* float */\n    ARG_STRING,         /* string */\n    ARG_ENTITY,         /* int */\n};"
        },
        {
            "Comment": "Temp entity message types for message_begin()",
            "CommentTags": [],
            "Constant": "#define    TE_BEAMPOINTS               0        // Beam effect between two points\n// write_byte(TE_BEAMPOINTS)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z)\n// write_short(sprite index) \n// write_byte(starting frame) \n// write_byte(frame rate in 0.1's) \n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(noise amplitude in 0.01's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(scroll speed in 0.1's)\n\n#define    TE_BEAMENTPOINT             1        // Beam effect between point and entity\n// write_byte(TE_BEAMENTPOINT)\n// write_short(start entity) \n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z)\n// write_short(sprite index) \n// write_byte(starting frame) \n// write_byte(frame rate in 0.1's) \n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(noise amplitude in 0.01's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(scroll speed in 0.1's)\n\n#define    TE_GUNSHOT                  2        // Particle effect plus ricochet sound\n// write_byte(TE_GUNSHOT)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n\n#define    TE_EXPLOSION                3        // Additive sprite, 2 dynamic lights, flickering particles, explosion sound, move vertically 8 pps\n// write_byte(TE_EXPLOSION)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(sprite index)\n// write_byte(scale in 0.1's)\n// write_byte(framerate)\n// write_byte(flags)\n//\n// The Explosion effect has some flags to control performance/aesthetic features:\n#define TE_EXPLFLAG_NONE            0        // All flags clear makes default Half-Life explosion\n#define TE_EXPLFLAG_NOADDITIVE      1        // Sprite will be drawn opaque (ensure that the sprite you send is a non-additive sprite)\n#define TE_EXPLFLAG_NODLIGHTS       2        // Do not render dynamic lights\n#define TE_EXPLFLAG_NOSOUND         4        // Do not play client explosion sound\n#define TE_EXPLFLAG_NOPARTICLES     8        // Do not draw particles\n\n#define    TE_TAREXPLOSION             4        // Quake1 \"tarbaby\" explosion with sound\n// write_byte(TE_TAREXPLOSION)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n\n#define    TE_SMOKE                    5        // Alphablend sprite, move vertically 30 pps\n// write_byte(TE_SMOKE)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z) \n// write_short(sprite index)\n// write_byte(scale in 0.1's)\n// write_byte(framerate)\n\n#define    TE_TRACER                   6        // Tracer effect from point to point\n// write_byte(TE_TRACER)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z)\n\n#define    TE_LIGHTNING                7        // TE_BEAMPOINTS with simplified parameters\n// write_byte(TE_LIGHTNING)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z)\n// write_byte(life in 0.1's) \n// write_byte(width in 0.1's) \n// write_byte(amplitude in 0.01's)\n// write_short(sprite model index)\n\n#define    TE_BEAMENTS                 8\n// write_byte(TE_BEAMENTS)\n// write_short(start entity) \n// write_short(end entity) \n// write_short(sprite index) \n// write_byte(starting frame) \n// write_byte(frame rate in 0.1's) \n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(noise amplitude in 0.01's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(scroll speed in 0.1's)\n\n#define    TE_SPARKS                   9        // 8 random tracers with gravity, ricochet sprite\n// write_byte(TE_SPARKS)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z) \n\n#define    TE_LAVASPLASH               10       // Quake1 lava splash\n// write_byte(TE_LAVASPLASH)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n\n#define    TE_TELEPORT                 11       // Quake1 teleport splash\n// write_byte(TE_TELEPORT)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n\n#define TE_EXPLOSION2               12       // Quake1 colormaped (base palette) particle explosion with sound\n// write_byte(TE_EXPLOSION2)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(starting color)\n// write_byte(num colors)\n\n#define TE_BSPDECAL                 13       // Decal from the .BSP file\n// write_byte(TE_BSPDECAL)\n// write_coord(position.x) decal position (center of texture in world)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(texture index of precached decal texture name)\n// write_short(entity index)\n// [optional - write_short(index of model of above entity) only included if previous short is non-zero (not the world)]\n\n#define TE_IMPLOSION                14       // Tracers moving toward a point\n// write_byte(TE_IMPLOSION)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(radius)\n// write_byte(count)\n// write_byte(life in 0.1's) \n\n#define TE_SPRITETRAIL              15       // Line of moving glow sprites with gravity, fadeout, and collisions\n// write_byte(TE_SPRITETRAIL)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z)\n// write_short(sprite index)\n// write_byte(count)\n// write_byte(life in 0.1's) \n// write_byte(scale in 0.1's) \n// write_byte(velocity along vector in 10's)\n// write_byte(randomness of velocity in 10's)\n\n#define TE_SPRITE                   17       // Additive sprite, plays 1 cycle\n// write_byte(TE_SPRITE)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(sprite index) \n// write_byte(scale in 0.1's) \n// write_byte(brightness)\n\n#define TE_BEAMSPRITE               18       // A beam with a sprite at the end\n// write_byte(TE_BEAMSPRITE)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z) \n// write_short(beam sprite index) \n// write_short(end sprite index) \n\n#define TE_BEAMTORUS                19       // Screen aligned beam ring, expands to max radius over lifetime\n// write_byte(TE_BEAMTORUS)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(axis.x)\n// write_coord(axis.y)\n// write_coord(axis.z) \n// write_short(sprite index) \n// write_byte(starting frame) \n// write_byte(frame rate in 0.1's) \n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(noise amplitude in 0.01's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(scroll speed in 0.1's)\n\n#define TE_BEAMDISK                 20       // Disk that expands to max radius over lifetime\n// write_byte(TE_BEAMDISK)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(axis.x)\n// write_coord(axis.y)\n// write_coord(axis.z) \n// write_short(sprite index) \n// write_byte(starting frame) \n// write_byte(frame rate in 0.1's) \n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(noise amplitude in 0.01's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(scroll speed in 0.1's)\n\n#define TE_BEAMCYLINDER             21       // Cylinder that expands to max radius over lifetime\n// write_byte(TE_BEAMCYLINDER)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(axis.x)\n// write_coord(axis.y)\n// write_coord(axis.z) \n// write_short(sprite index) \n// write_byte(starting frame) \n// write_byte(frame rate in 0.1's) \n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(noise amplitude in 0.01's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(scroll speed in 0.1's)\n\n#define TE_BEAMFOLLOW               22       // Create a line of decaying beam segments until entity stops moving\n// write_byte(TE_BEAMFOLLOW)\n// write_short(entity:attachment to follow)\n// write_short(sprite index)\n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n\n#define TE_GLOWSPRITE               23\n// write_byte(TE_GLOWSPRITE)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(model index)\n// write_byte(scale / 10)\n// write_byte(size)\n// write_byte(brightness)\n\n#define TE_BEAMRING                 24       // Connect a beam ring to two entities\n// write_byte(TE_BEAMRING)\n// write_short(start entity) \n// write_short(end entity) \n// write_short(sprite index) \n// write_byte(starting frame) \n// write_byte(frame rate in 0.1's) \n// write_byte(life in 0.1's) \n// write_byte(line width in 0.1's) \n// write_byte(noise amplitude in 0.01's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(scroll speed in 0.1's)\n\n#define TE_STREAK_SPLASH            25       // Oriented shower of tracers\n// write_byte(TE_STREAK_SPLASH)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(vector.x)\n// write_coord(vector.y)\n// write_coord(vector.z) \n// write_byte(color)\n// write_short(count)\n// write_short(base speed)\n// write_short(ramdon velocity)\n\n#define TE_DLIGHT                   27       // Dynamic light, effect world, minor entity effect\n// write_byte(TE_DLIGHT)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(radius in 10's) \n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(brightness)\n// write_byte(life in 10's)\n// write_byte(decay rate in 10's)\n\n#define TE_ELIGHT                   28       // Point entity light, no world effect\n// write_byte(TE_ELIGHT)\n// write_short(entity:attachment to follow)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(radius)\n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n// write_byte(life in 0.1's)\n// write_coord(decay rate)\n\n#define TE_TEXTMESSAGE              29\n// write_byte(TE_TEXTMESSAGE)\n// write_byte(channel)\n// write_short(x) -1 = center)\n// write_short(y) -1 = center)\n// write_byte(effect) 0 = fade in/fade out, 1 is flickery credits, 2 is write out (training room)\n// write_byte(red) - text color\n// write_byte(green)\n// write_byte(blue)\n// write_byte(alpha)\n// write_byte(red) - effect color\n// write_byte(green)\n// write_byte(blue)\n// write_byte(alpha)\n// write_short(fadein time)\n// write_short(fadeout time)\n// write_short(hold time)\n// [optional] write_short(fxtime) time the highlight lags behing the leading text in effect 2\n// write_string(text message) 512 chars max string size\n\n#define TE_LINE                     30\n// write_byte(TE_LINE)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z)\n// write_short(life in 0.1 s)\n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n\n#define TE_BOX                      31\n// write_byte(TE_BOX)\n// write_coord(boxmins.x)\n// write_coord(boxmins.y)\n// write_coord(boxmins.z)\n// write_coord(boxmaxs.x)\n// write_coord(boxmaxs.y)\n// write_coord(boxmaxs.z)\n// write_short(life in 0.1 s)\n// write_byte(red)\n// write_byte(green)\n// write_byte(blue)\n\n#define TE_KILLBEAM                 99       // Kill all beams attached to entity\n// write_byte(TE_KILLBEAM)\n// write_short(entity)\n\n#define TE_LARGEFUNNEL              100\n// write_byte(TE_LARGEFUNNEL)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(sprite index) \n// write_short(flags) \n\n#define    TE_BLOODSTREAM              101      // Particle spray\n// write_byte(TE_BLOODSTREAM)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(vector.x)\n// write_coord(vector.y)\n// write_coord(vector.z)\n// write_byte(color)\n// write_byte(speed)\n\n#define    TE_SHOWLINE                 102      // Line of particles every 5 units, dies in 30 seconds\n// write_byte(TE_SHOWLINE)\n// write_coord(startposition.x)\n// write_coord(startposition.y)\n// write_coord(startposition.z)\n// write_coord(endposition.x)\n// write_coord(endposition.y)\n// write_coord(endposition.z)\n\n#define TE_BLOOD                    103      // Particle spray\n// write_byte(TE_BLOOD)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(vector.x)\n// write_coord(vector.y)\n// write_coord(vector.z)\n// write_byte(color)\n// write_byte(speed)\n\n#define TE_DECAL                    104      // Decal applied to a brush entity (not the world)\n// write_byte(TE_DECAL)\n// write_coord(position.x) decal position (center of texture in world)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(texture index of precached decal texture name)\n// write_short(entity index)\n\n#define TE_FIZZ                     105      // Create alpha sprites inside of entity, float upwards\n// write_byte(TE_FIZZ)\n// write_short(entity)\n// write_short(sprite index)\n// write_byte density)\n\n#define TE_MODEL                    106      // Create a moving model that bounces and makes a sound when it hits\n// write_byte(TE_MODEL)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(velocity.x)\n// write_coord(velocity.y)\n// write_coord(velocity.z)\n// write_angle(initial yaw)\n// write_short(model index)\n// write_byte(bounce sound type)\n// write_byte(life in 0.1's)\n\n#define TE_EXPLODEMODEL             107      // Spherical shower of models, picks from set\n// write_byte(TE_EXPLODEMODEL)\n// write_coord(origin.x)\n// write_coord(origin.y)\n// write_coord(origin.z)\n// write_coord(velocity.x)\n// write_coord(velocity.y)\n// write_coord(velocity.z)\n// write_short(model index)\n// write_short(count)\n// write_byte(life in 0.1's)\n\n#define TE_BREAKMODEL               108      // Box of models or sprites\n// write_byte(TE_BREAKMODEL)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(size.x)\n// write_coord(size.y)\n// write_coord(size.z)\n// write_coord(velocity.x)\n// write_coord(velocity.y)\n// write_coord(velocity.z)\n// write_byte(random velocity in 10's)\n// write_short(sprite or model index)\n// write_byte(count)\n// write_byte(life in 0.1 secs)\n// write_byte(flags)\n\n#define TE_GUNSHOTDECAL             109      // Decal and ricochet sound\n// write_byte(TE_GUNSHOTDECAL)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(entity index???)\n// write_byte(decal???)\n\n#define TE_SPRITE_SPRAY             110      // Spray of alpha sprites\n// write_byte(TE_SPRITE_SPRAY)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(velocity.x)\n// write_coord(velocity.y)\n// write_coord(velocity.z)\n// write_short(sprite index)\n// write_byte(count)\n// write_byte(speed)\n// write_byte(noise)\n\n#define TE_ARMOR_RICOCHET           111      // Quick spark sprite, client ricochet sound.\n// write_byte(TE_ARMOR_RICOCHET)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(scale in 0.1's)\n\n#define TE_PLAYERDECAL              112\n// write_byte(TE_PLAYERDECAL)\n// write_byte(playerindex)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(entity???)\n// write_byte(decal number)\n// [optional] write_short(model index)\n\n#define TE_BUBBLES                  113      // Create alpha sprites inside of box, float upwards\n// write_byte(TE_BUBBLES)\n// write_coord(position.x) (min start position)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(position.x) (max start position)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(float height)\n// write_short(model index)\n// write_byte(count)\n// write_coord(speed)\n\n#define TE_BUBBLETRAIL              114      // Create alpha sprites along a line, float upwards\n// write_byte(TE_BUBBLETRAIL)\n// write_coord(position.x) (min start position)\n// write_coord(position.y) (min start position)\n// write_coord(position.z) (min start position)\n// write_coord(position.x) (max start position)\n// write_coord(position.y) (max start position)\n// write_coord(position.z) (max start position)\n// write_coord(float height)\n// write_short(model index)\n// write_byte(count)\n// write_coord(speed)\n\n#define TE_BLOODSPRITE              115      // Spray of opaque sprite1's that fall, single sprite2 for 1..2 secs (this is a high-priority tent)\n// write_byte(TE_BLOODSPRITE)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_short(sprite1 index)\n// write_short(sprite2 index)\n// write_byte(color)\n// write_byte(scale)\n\n#define TE_WORLDDECAL               116      // Decal applied to the world brush\n// write_byte(TE_WORLDDECAL)\n// write_coord(position.x) decal position (center of texture in world)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(texture index of precached decal texture name)\n\n#define TE_WORLDDECALHIGH           117      // Decal (with texture index > 256) applied to world brush\n// write_byte(TE_WORLDDECALHIGH)\n// write_coord(position.x) decal position (center of texture in world)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(texture index of precached decal texture name - 256)\n\n#define TE_DECALHIGH                118      // Same as TE_DECAL, but the texture index was greater than 256\n// write_byte(TE_DECALHIGH)\n// write_coord(position.x) decal position (center of texture in world)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_byte(texture index of precached decal texture name - 256)\n// write_short(entity index)\n\n#define TE_PROJECTILE               119      // Makes a projectile (like a nail) (this is a high-priority tent)\n// write_byte(TE_PROJECTILE)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(velocity.x)\n// write_coord(velocity.y)\n// write_coord(velocity.z)\n// write_short(modelindex)\n// write_byte(life)\n// write_byte(owner)  projectile won't collide with owner (if owner == 0, projectile will hit any client).\n\n#define TE_SPRAY                    120      // Throws a shower of sprites or models\n// write_byte(TE_SPRAY)\n// write_coord(position.x)\n// write_coord(position.y)\n// write_coord(position.z)\n// write_coord(direction.x)\n// write_coord(direction.y)\n// write_coord(direction.z)\n// write_short(modelindex)\n// write_byte(count)\n// write_byte(speed)\n// write_byte(noise)\n// write_byte(rendermode)\n\n#define TE_PLAYERSPRITES            121      // Sprites emit from a player's bounding box (ONLY use for players!)\n// write_byte(TE_PLAYERSPRITES)\n// write_short(playernum)\n// write_short(sprite modelindex)\n// write_byte(count)\n// write_byte(variance) (0 = no variance in size) (10 = 10% variance in size)\n\n#define TE_PARTICLEBURST            122      // Very similar to lavasplash\n// write_byte(TE_PARTICLEBURST)\n// write_coord(origin)\n// write_short(radius)\n// write_byte(particle color)\n// write_byte(duration * 10) (will be randomized a bit)\n\n#define TE_FIREFIELD                123      // Makes a field of fire\n// write_byte(TE_FIREFIELD)\n// write_coord(origin)\n// write_short(radius) (fire is made in a square around origin. -radius, -radius to radius, radius)\n// write_short(modelindex)\n// write_byte(count)\n// write_byte(flags)\n// write_byte(duration (in seconds) * 10) (will be randomized a bit)\n//\n// to keep network traffic low, this message has associated flags that fit into a byte:\n#define TEFIRE_FLAG_ALLFLOAT        1        // All sprites will drift upwards as they animate\n#define TEFIRE_FLAG_SOMEFLOAT       2        // Some of the sprites will drift upwards. (50% chance)\n#define TEFIRE_FLAG_LOOP            4        // If set, sprite plays at 15 fps, otherwise plays at whatever rate stretches the animation over the sprite's duration.\n#define TEFIRE_FLAG_ALPHA           8        // If set, sprite is rendered alpha blended at 50% else, opaque\n#define TEFIRE_FLAG_PLANAR          16       // If set, all fire sprites have same initial Z instead of randomly filling a cube. \n\n#define TE_PLAYERATTACHMENT         124      // Attaches a TENT to a player (this is a high-priority tent)\n// write_byte(TE_PLAYERATTACHMENT)\n// write_byte(entity index of player)\n// write_coord(vertical offset) (attachment origin.z = player origin.z + vertical offset)\n// write_short(model index)\n// write_short(life * 10 )\n\n#define TE_KILLPLAYERATTACHMENTS    125      // Will expire all TENTS attached to a player.\n// write_byte(TE_KILLPLAYERATTACHMENTS)\n// write_byte(entity index of player)\n\n#define TE_MULTIGUNSHOT             126      // Much more compact shotgun message\n// This message is used to make a client approximate a 'spray' of gunfire.\n// Any weapon that fires more than one bullet per frame and fires in a bit of a spread is\n// a good candidate for MULTIGUNSHOT use. (shotguns)\n//\n// NOTE: This effect makes the client do traces for each bullet, these client traces ignore\n//         entities that have studio models.Traces are 4096 long.\n//\n// write_byte(TE_MULTIGUNSHOT)\n// write_coord(origin.x)\n// write_coord(origin.y)\n// write_coord(origin.z)\n// write_coord(direction.x)\n// write_coord(direction.y)\n// write_coord(direction.z)\n// write_coord(x noise * 100)\n// write_coord(y noise * 100)\n// write_byte(count)\n// write_byte(bullethole decal texture index)\n\n#define TE_USERTRACER               127      // Larger message than the standard tracer, but allows some customization.\n// write_byte(TE_USERTRACER)\n// write_coord(origin.x)\n// write_coord(origin.y)\n// write_coord(origin.z)\n// write_coord(velocity.x)\n// write_coord(velocity.y)\n// write_coord(velocity.z)\n// write_byte(life * 10)\n// write_byte(color) this is an index into an array of color vectors in the engine. (0 - )\n// write_byte(length * 10)\n\n// From hltv.h from the HLSDK, these are used in conjunction with SVC_DIRECTOR\n// sub commands of svc_director:\n#define DRC_CMD_NONE                0    // NULL director command\n#define DRC_CMD_START                1    // start director mode\n#define DRC_CMD_EVENT                2    // informs about director command\n#define DRC_CMD_MODE                3    // switches camera modes\n#define DRC_CMD_CAMERA                4    // sets camera registers\n#define DRC_CMD_TIMESCALE            5    // sets time scale\n#define DRC_CMD_MESSAGE                6    // send HUD centerprint\n#define DRC_CMD_SOUND                7    // plays a particular sound\n#define DRC_CMD_STATUS                8    // status info about broadcast\n#define DRC_CMD_BANNER                9    // banner file name for HLTV gui\n#define    DRC_CMD_FADE                10    // send screen fade command\n#define DRC_CMD_SHAKE                11    // send screen shake command\n#define DRC_CMD_STUFFTEXT            12    // like the normal svc_stufftext but as director command\n\n#define DRC_CMD_LAST                12\n\n// HLTV_EVENT event flags\n#define DRC_FLAG_PRIO_MASK        0x0F    // priorities between 0 and 15 (15 most important)\n#define DRC_FLAG_SIDE            (1<<4)    // \n#define DRC_FLAG_DRAMATIC        (1<<5)    // is a dramatic scene\n#define DRC_FLAG_SLOWMOTION        (1<<6)  // would look good in SloMo\n#define DRC_FLAG_FACEPLAYER        (1<<7)  // player is doning something (reload/defuse bomb etc)\n#define DRC_FLAG_INTRO            (1<<8)    // is a introduction scene\n#define DRC_FLAG_FINAL            (1<<9)    // is a final scene\n#define DRC_FLAG_NO_RANDOM        (1<<10)    // don't randomize event data\n\n\n#define MAX_DIRECTOR_CMD_PARAMETERS        4\n#define MAX_DIRECTOR_CMD_STRING            128"
        }
    ]
}